#!/bin/bash
# Enhanced Database Connection Script with Schema Management
# Generated by Ansible - Timestamp: {{ deployment_time }}
# Environment: {{ deployment_environment | default('development') }}

set -euo pipefail

# Configuration
DB_SERVICE="{{ database_name }}_HIGH"
DB_ADMIN_USER="{{ admin_username }}"
DB_ADMIN_PASSWORD="{{ admin_password }}"
WALLET_DIR="{{ wallet_dir }}"

# Schema-based connection support
DB_SCHEMA_USER="${DB_SCHEMA_USER:-{{ schema_user | default('PARTMGMT') }}}"
DB_SCHEMA_PASSWORD="${DB_SCHEMA_PASSWORD:-{{ schema_password | default(admin_password) }}}"

# Connection modes
CONNECTION_MODE="${1:-interactive}"  # interactive, admin, schema, readonly

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

# Display connection banner
display_banner() {
    echo -e "${GREEN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          Enhanced Oracle Database Connection                     ‚ïë
‚ïë          üö® ALWAYS FREE TIER PROTECTION üö®                      ‚ïë
‚ïë          üìä Schema-Aware Connection Management                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Display usage information
show_usage() {
    echo "Usage: $0 [CONNECTION_MODE]"
    echo ""
    echo "Connection Modes:"
    echo "  interactive   - Interactive mode with connection options (default)"
    echo "  admin        - Direct admin connection"
    echo "  schema       - Connect as schema user (PARTMGMT)"
    echo "  readonly     - Read-only connection"
    echo ""
    echo "Environment Variables:"
    echo "  DB_SCHEMA_USER     - Schema username (default: PARTMGMT)"
    echo "  DB_SCHEMA_PASSWORD - Schema password (default: admin password)"
    echo ""
    echo "Examples:"
    echo "  $0                 # Interactive mode"
    echo "  $0 admin          # Direct admin connection"
    echo "  $0 schema         # Schema user connection"
    echo "  DB_SCHEMA_USER=MYUSER $0 schema  # Custom schema user"
}

# Validate prerequisites
validate_environment() {
    log "Validating connection environment..."
    
    if [[ ! -d "$WALLET_DIR" ]]; then
        error "Database wallet directory not found: $WALLET_DIR"
        exit 1
    fi
    
    if [[ ! -f "$WALLET_DIR/tnsnames.ora" ]]; then
        error "TNS names file not found: $WALLET_DIR/tnsnames.ora"
        exit 1
    fi
    
    if ! command -v sqlplus &> /dev/null; then
        error "SQL*Plus not found in PATH"
        echo "Please ensure Oracle client tools are installed"
        exit 1
    fi
    
    success "Environment validation completed"
}

# Test database connection
test_connection() {
    local user="$1"
    local password="$2"
    local service="$3"
    
    export TNS_ADMIN="$WALLET_DIR"
    
    local test_sql="SELECT 'CONNECTION_SUCCESS' FROM dual;"
    
    if echo "$test_sql" | sqlplus -s "${user}/${password}@${service}" 2>/dev/null | grep -q "CONNECTION_SUCCESS"; then
        return 0
    else
        return 1
    fi
}

# Get available schemas
get_schemas() {
    export TNS_ADMIN="$WALLET_DIR"
    
    local query="SELECT username FROM all_users WHERE username NOT IN ('SYS','SYSTEM','OUTLN','DIP','ORACLE_OCM','DBSNMP','APPQOSSYS','WMSYS','APEX_030200','OWBSYS','OWBSYS_AUDIT','ORDPLUGINS','ORDDATA','CTXSYS','ANONYMOUS','XDB','XS\$NULL','APEX_PUBLIC_USER','FLOWS_FILES','APEX_040000','APEX_040200','HR','OE','PM','IX','SH','BI') ORDER BY username;"
    
    echo "$query" | sqlplus -s "${DB_ADMIN_USER}/${DB_ADMIN_PASSWORD}@${DB_SERVICE}" 2>/dev/null | grep -E '^[A-Z][A-Z0-9_]*$' || true
}

# Display connection information
display_connection_info() {
    echo ""
    info "üîó Connection Information:"
    echo "   Database Service: ${DB_SERVICE}"
    echo "   Wallet Location: ${WALLET_DIR}"
    echo "   TNS Admin: ${WALLET_DIR}"
    echo ""
    
    info "üë• Available Connection Types:"
    echo "   ‚Ä¢ Admin Connection: ${DB_ADMIN_USER}@${DB_SERVICE}"
    echo "   ‚Ä¢ Schema Connection: ${DB_SCHEMA_USER}@${DB_SERVICE}"
    echo ""
    
    info "üìã Available Database Services:"
    if [[ -f "$WALLET_DIR/tnsnames.ora" ]]; then
        grep -E "^[A-Z_]+.*=" "$WALLET_DIR/tnsnames.ora" | sed 's/=.*//' | sort | sed 's/^/   ‚Ä¢ /'
    fi
    echo ""
    
    # Show available schemas if admin connection works
    if test_connection "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE"; then
        info "üóÇÔ∏è  Available Schemas:"
        local schemas=$(get_schemas)
        if [[ -n "$schemas" ]]; then
            echo "$schemas" | sed 's/^/   ‚Ä¢ /'
        else
            echo "   ‚Ä¢ No custom schemas found"
        fi
        echo ""
    fi
}

# Interactive connection mode
interactive_mode() {
    display_connection_info
    
    echo "Select connection type:"
    echo "1) Admin Connection (${DB_ADMIN_USER})"
    echo "2) Schema Connection (${DB_SCHEMA_USER})"
    echo "3) Custom Connection"
    echo "4) Test All Connections"
    echo "5) Exit"
    echo ""
    
    read -p "Enter your choice (1-5): " choice
    
    case $choice in
        1)
            connect_to_database "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE" "Admin"
            ;;
        2)
            # Test if schema user exists
            if test_connection "$DB_SCHEMA_USER" "$DB_SCHEMA_PASSWORD" "$DB_SERVICE"; then
                connect_to_database "$DB_SCHEMA_USER" "$DB_SCHEMA_PASSWORD" "$DB_SERVICE" "Schema"
            else
                warning "Schema user ${DB_SCHEMA_USER} not accessible. Using admin connection."
                connect_to_database "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE" "Admin (Schema N/A)"
            fi
            ;;
        3)
            custom_connection
            ;;
        4)
            test_all_connections
            ;;
        5)
            info "Goodbye!"
            exit 0
            ;;
        *)
            error "Invalid choice. Please select 1-5."
            interactive_mode
            ;;
    esac
}

# Custom connection function
custom_connection() {
    echo ""
    read -p "Enter username: " custom_user
    read -s -p "Enter password: " custom_password
    echo ""
    read -p "Enter service (default: ${DB_SERVICE}): " custom_service
    custom_service=${custom_service:-$DB_SERVICE}
    
    if test_connection "$custom_user" "$custom_password" "$custom_service"; then
        success "Connection test successful"
        connect_to_database "$custom_user" "$custom_password" "$custom_service" "Custom"
    else
        error "Connection test failed"
        read -p "Try again? (y/n): " retry
        if [[ "$retry" =~ ^[Yy] ]]; then
            custom_connection
        fi
    fi
}

# Test all connections
test_all_connections() {
    echo ""
    info "üß™ Testing all connection types..."
    echo ""
    
    # Test admin connection
    echo -n "Admin Connection (${DB_ADMIN_USER}): "
    if test_connection "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE"; then
        echo -e "${GREEN}‚úì SUCCESS${NC}"
    else
        echo -e "${RED}‚úó FAILED${NC}"
    fi
    
    # Test schema connection
    echo -n "Schema Connection (${DB_SCHEMA_USER}): "
    if test_connection "$DB_SCHEMA_USER" "$DB_SCHEMA_PASSWORD" "$DB_SERVICE"; then
        echo -e "${GREEN}‚úì SUCCESS${NC}"
    else
        echo -e "${YELLOW}? UNAVAILABLE${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# Main connection function
connect_to_database() {
    local user="$1"
    local password="$2"
    local service="$3"
    local connection_type="${4:-Connection}"
    
    export TNS_ADMIN="$WALLET_DIR"
    
    echo ""
    success "üöÄ Connecting to Oracle Database..."
    info "   Connection Type: ${connection_type}"
    info "   User: ${user}"
    info "   Service: ${service}"
    echo ""
    echo "   üí° Useful commands:"
    echo "   ‚Ä¢ SELECT USER FROM dual;           -- Show current user"
    echo "   ‚Ä¢ SELECT * FROM user_tables;       -- Show your tables"
    echo "   ‚Ä¢ SELECT * FROM all_users;         -- Show all users"
    echo "   ‚Ä¢ exit                             -- Disconnect"
    echo ""
    
    # Connect to database
    sqlplus "${user}/${password}@${service}"
}

# Main execution
main() {
    # Handle help requests
    if [[ "${1:-}" =~ ^(-h|--help)$ ]]; then
        show_usage
        exit 0
    fi
    
    display_banner
    validate_environment
    
    case "$CONNECTION_MODE" in
        interactive)
            interactive_mode
            ;;
        admin)
            log "Connecting as admin user..."
            if test_connection "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE"; then
                connect_to_database "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE" "Admin"
            else
                error "Admin connection failed"
                exit 1
            fi
            ;;
        schema)
            log "Connecting as schema user..."
            if test_connection "$DB_SCHEMA_USER" "$DB_SCHEMA_PASSWORD" "$DB_SERVICE"; then
                connect_to_database "$DB_SCHEMA_USER" "$DB_SCHEMA_PASSWORD" "$DB_SERVICE" "Schema"
            else
                warning "Schema user not available, falling back to admin"
                connect_to_database "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE" "Admin (Schema Fallback)"
            fi
            ;;
        readonly)
            log "Connecting in read-only mode..."
            # Use admin connection with read-only session
            if test_connection "$DB_ADMIN_USER" "$DB_ADMIN_PASSWORD" "$DB_SERVICE"; then
                export TNS_ADMIN="$WALLET_DIR"
                echo "SET TRANSACTION READ ONLY;" | sqlplus "${DB_ADMIN_USER}/${DB_ADMIN_PASSWORD}@${DB_SERVICE}"
            else
                error "Read-only connection failed"
                exit 1
            fi
            ;;
        *)
            error "Invalid connection mode: $CONNECTION_MODE"
            show_usage
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"