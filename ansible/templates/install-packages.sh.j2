#!/bin/bash
# Generated by Ansible - Oracle Package Installation Script
# Timestamp: {{ ansible_date_time.iso8601 }}
# Environment: {{ deployment_environment }}

set -euo pipefail

# Configuration
ORACLE_HOME="{{ oracle_home }}"
TNS_ADMIN="{{ tns_admin }}"
WALLET_DIR="{{ wallet_location }}"
DB_SERVICE="{{ database_service_name }}"
DB_USER="{{ database_username }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Validate prerequisites
validate_environment() {
    log "Validating Oracle environment..."
    
    if [[ ! -d "$ORACLE_HOME" ]]; then
        error "Oracle Home directory not found: $ORACLE_HOME"
        exit 1
    fi
    
    if [[ ! -d "$WALLET_DIR" ]]; then
        error "Database wallet directory not found: $WALLET_DIR"
        exit 1
    fi
    
    if ! command -v sqlplus &> /dev/null; then
        error "SQL*Plus not found in PATH"
        exit 1
    fi
    
    success "Environment validation completed"
}

# Test database connection
test_connection() {
    log "Testing database connection..."
    
    local test_sql=$(cat << 'EOF'
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT FAILURE
SET PAGESIZE 0
SET FEEDBACK OFF
SET VERIFY OFF
SET HEADING OFF
SELECT 'CONNECTION_TEST_SUCCESS' FROM DUAL;
EXIT;
EOF
)
    
    local result
    if result=$(echo "$test_sql" | sqlplus -s "${DB_USER}@${DB_SERVICE}" 2>&1); then
        if echo "$result" | grep -q "CONNECTION_TEST_SUCCESS"; then
            success "Database connection successful"
            return 0
        else
            error "Database connection test failed: $result"
            return 1
        fi
    else
        error "Failed to execute connection test: $result"
        return 1
    fi
}

# Install package from file
install_package() {
    local package_file="$1"
    local package_name="$2"
    
    if [[ ! -f "$package_file" ]]; then
        error "Package file not found: $package_file"
        return 1
    fi
    
    log "Installing package: $package_name from $package_file"
    
    local install_sql=$(cat << EOF
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT FAILURE
SET SERVEROUTPUT ON SIZE UNLIMITED
SET VERIFY OFF
SET ECHO ON

PROMPT Installing $package_name...
@$package_file

PROMPT Package installation completed: $package_name
EXIT;
EOF
)
    
    if echo "$install_sql" | sqlplus "${DB_USER}@${DB_SERVICE}" > "/tmp/install_${package_name}.log" 2>&1; then
        success "Package installed successfully: $package_name"
        return 0
    else
        error "Package installation failed: $package_name"
        cat "/tmp/install_${package_name}.log"
        return 1
    fi
}

# Main installation process
main() {
    log "Starting Oracle package installation process"
    
    validate_environment
    test_connection
    
    # Package installation sequence
{% for package in oracle_packages %}
    install_package "{{ package.file }}" "{{ package.name }}"
{% endfor %}
    
    log "Verifying installed packages..."
    
    local verify_sql=$(cat << 'EOF'
WHENEVER SQLERROR EXIT SQL.SQLCODE
SET PAGESIZE 1000
SET LINESIZE 200
SET VERIFY OFF

PROMPT ==============================================
PROMPT Installed Packages Verification
PROMPT ==============================================

SELECT object_name, object_type, status
FROM user_objects 
WHERE object_type IN ('PACKAGE', 'PACKAGE BODY')
ORDER BY object_type, object_name;

PROMPT ==============================================
PROMPT Invalid Objects Check
PROMPT ==============================================

SELECT object_name, object_type, status
FROM user_objects 
WHERE status = 'INVALID'
ORDER BY object_type, object_name;

EXIT;
EOF
)
    
    echo "$verify_sql" | sqlplus "${DB_USER}@${DB_SERVICE}"
    
    success "Oracle package installation process completed"
}

# Execute main function
main "$@"