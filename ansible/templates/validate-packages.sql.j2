-- Generated by Ansible - Oracle Package Validation Script
-- Timestamp: {{ ansible_date_time.iso8601 }}
-- Environment: {{ deployment_environment }}
-- Database: {{ database_service_name }}

WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT FAILURE
SET SERVEROUTPUT ON SIZE UNLIMITED
SET PAGESIZE 1000
SET LINESIZE 200
SET VERIFY OFF
SET FEEDBACK ON
SET TIMING ON

PROMPT ====================================================================
PROMPT Oracle Package Validation Report
PROMPT Environment: {{ deployment_environment }}
PROMPT Database: {{ database_service_name }}
PROMPT User: {{ database_username }}
PROMPT Timestamp: {{ ansible_date_time.iso8601 }}
PROMPT ====================================================================

-- Database Connection Info
PROMPT
PROMPT ====================================================================
PROMPT DATABASE CONNECTION INFORMATION
PROMPT ====================================================================

SELECT 
    SYS_CONTEXT('USERENV', 'DB_NAME') AS database_name,
    SYS_CONTEXT('USERENV', 'INSTANCE_NAME') AS instance_name,
    SYS_CONTEXT('USERENV', 'SERVER_HOST') AS server_host,
    SYS_CONTEXT('USERENV', 'SESSION_USER') AS session_user,
    SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AS current_schema,
    TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS current_time
FROM dual;

-- Package Status Summary
PROMPT
PROMPT ====================================================================
PROMPT PACKAGE STATUS SUMMARY
PROMPT ====================================================================

SELECT 
    object_type,
    status,
    COUNT(*) as count
FROM user_objects 
WHERE object_type IN ('PACKAGE', 'PACKAGE BODY', 'FUNCTION', 'PROCEDURE')
GROUP BY object_type, status
ORDER BY object_type, status;

-- Detailed Package Information
PROMPT
PROMPT ====================================================================
PROMPT DETAILED PACKAGE INFORMATION
PROMPT ====================================================================

SELECT 
    object_name,
    object_type,
    status,
    TO_CHAR(created, 'YYYY-MM-DD HH24:MI:SS') as created_date,
    TO_CHAR(last_ddl_time, 'YYYY-MM-DD HH24:MI:SS') as last_modified
FROM user_objects 
WHERE object_type IN ('PACKAGE', 'PACKAGE BODY')
ORDER BY object_type, object_name;

-- Expected Packages Verification
PROMPT
PROMPT ====================================================================
PROMPT EXPECTED PACKAGES VERIFICATION
PROMPT ====================================================================

{% for package in expected_packages %}
DECLARE
    v_count NUMBER;
    v_status VARCHAR2(20);
BEGIN
    -- Check if package exists
    SELECT COUNT(*), MAX(status)
    INTO v_count, v_status
    FROM user_objects
    WHERE object_name = '{{ package.name|upper }}'
    AND object_type = 'PACKAGE';
    
    IF v_count > 0 THEN
        DBMS_OUTPUT.PUT_LINE('‚úì {{ package.name }}: ' || v_status);
        
        -- Check for package body if expected
        {% if package.has_body|default(true) %}
        SELECT COUNT(*)
        INTO v_count
        FROM user_objects
        WHERE object_name = '{{ package.name|upper }}'
        AND object_type = 'PACKAGE BODY'
        AND status = 'VALID';
        
        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('‚úì {{ package.name }} BODY: VALID');
        ELSE
            DBMS_OUTPUT.PUT_LINE('‚úó {{ package.name }} BODY: MISSING OR INVALID');
        END IF;
        {% endif %}
    ELSE
        DBMS_OUTPUT.PUT_LINE('‚úó {{ package.name }}: NOT FOUND');
    END IF;
END;
/
{% endfor %}

-- Invalid Objects Report
PROMPT
PROMPT ====================================================================
PROMPT INVALID OBJECTS REPORT
PROMPT ====================================================================

SELECT 
    object_name,
    object_type,
    status,
    TO_CHAR(last_ddl_time, 'YYYY-MM-DD HH24:MI:SS') as last_modified
FROM user_objects 
WHERE status != 'VALID'
ORDER BY object_type, object_name;

-- Dependencies Analysis
PROMPT
PROMPT ====================================================================
PROMPT PACKAGE DEPENDENCIES ANALYSIS
PROMPT ====================================================================

SELECT DISTINCT
    d.name as dependent_object,
    d.type as dependent_type,
    d.referenced_name as depends_on,
    d.referenced_type as dependency_type
FROM user_dependencies d
WHERE d.type IN ('PACKAGE', 'PACKAGE BODY')
AND d.referenced_type IN ('PACKAGE', 'PACKAGE BODY', 'TABLE', 'VIEW')
ORDER BY d.name, d.referenced_name;

-- Compilation Errors (if any)
PROMPT
PROMPT ====================================================================
PROMPT COMPILATION ERRORS
PROMPT ====================================================================

SELECT 
    name,
    type,
    line,
    position,
    text as error_message
FROM user_errors
WHERE type IN ('PACKAGE', 'PACKAGE BODY')
ORDER BY name, type, line, position;

-- Table Access Verification
PROMPT
PROMPT ====================================================================
PROMPT TABLE ACCESS VERIFICATION
PROMPT ====================================================================

{% for table in required_tables|default([]) %}
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM user_tables
    WHERE table_name = '{{ table|upper }}';
    
    IF v_count > 0 THEN
        DBMS_OUTPUT.PUT_LINE('‚úì Table {{ table }}: EXISTS');
        
        -- Check record count
        EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM {{ table }}'
        INTO v_count;
        
        DBMS_OUTPUT.PUT_LINE('  ‚îî‚îÄ Record count: ' || v_count);
    ELSE
        DBMS_OUTPUT.PUT_LINE('‚úó Table {{ table }}: NOT FOUND');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚úó Table {{ table }}: ACCESS ERROR - ' || SQLERRM);
END;
/
{% endfor %}

-- Performance Statistics
PROMPT
PROMPT ====================================================================
PROMPT PERFORMANCE STATISTICS
PROMPT ====================================================================

SELECT 
    'Database Size' as metric,
    ROUND(SUM(bytes)/1024/1024, 2) || ' MB' as value
FROM user_segments
UNION ALL
SELECT 
    'Object Count' as metric,
    COUNT(*) || ' objects' as value
FROM user_objects
UNION ALL
SELECT 
    'Session Memory' as metric,
    ROUND(value/1024/1024, 2) || ' MB' as value
FROM v$mystat m, v$statname s
WHERE m.statistic# = s.statistic#
AND s.name = 'session pga memory';

-- Function/Procedure Test Calls
PROMPT
PROMPT ====================================================================
PROMPT FUNCTIONAL VALIDATION TESTS
PROMPT ====================================================================

{% for test in validation_tests|default([]) %}
PROMPT Testing: {{ test.description }}
DECLARE
    v_result {{ test.return_type|default('VARCHAR2(4000)') }};
BEGIN
    {% if test.type == 'function' %}
    v_result := {{ test.call }};
    DBMS_OUTPUT.PUT_LINE('‚úì {{ test.name }}: ' || v_result);
    {% else %}
    {{ test.call }};
    DBMS_OUTPUT.PUT_LINE('‚úì {{ test.name }}: EXECUTED SUCCESSFULLY');
    {% endif %}
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚úó {{ test.name }}: ERROR - ' || SQLERRM);
END;
/
{% endfor %}

-- Final Summary
PROMPT
PROMPT ====================================================================
PROMPT VALIDATION SUMMARY
PROMPT ====================================================================

DECLARE
    v_total_objects NUMBER;
    v_valid_objects NUMBER;
    v_invalid_objects NUMBER;
    v_success_rate NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_total_objects
    FROM user_objects
    WHERE object_type IN ('PACKAGE', 'PACKAGE BODY', 'FUNCTION', 'PROCEDURE');
    
    SELECT COUNT(*)
    INTO v_valid_objects
    FROM user_objects
    WHERE object_type IN ('PACKAGE', 'PACKAGE BODY', 'FUNCTION', 'PROCEDURE')
    AND status = 'VALID';
    
    v_invalid_objects := v_total_objects - v_valid_objects;
    
    IF v_total_objects > 0 THEN
        v_success_rate := ROUND((v_valid_objects / v_total_objects) * 100, 2);
    ELSE
        v_success_rate := 0;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('Total Objects: ' || v_total_objects);
    DBMS_OUTPUT.PUT_LINE('Valid Objects: ' || v_valid_objects);
    DBMS_OUTPUT.PUT_LINE('Invalid Objects: ' || v_invalid_objects);
    DBMS_OUTPUT.PUT_LINE('Success Rate: ' || v_success_rate || '%');
    
    IF v_success_rate = 100 THEN
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('üéâ ALL PACKAGES VALIDATED SUCCESSFULLY! üéâ');
    ELSIF v_success_rate >= 90 THEN
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('‚ö†Ô∏è  MOSTLY SUCCESSFUL - REVIEW WARNINGS');
    ELSE
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('‚ùå VALIDATION FAILED - REVIEW ERRORS');
    END IF;
END;
/

PROMPT
PROMPT ====================================================================
PROMPT Validation completed at {{ ansible_date_time.iso8601 }}
PROMPT ====================================================================

EXIT;