#!/bin/bash
# Generated by Ansible - Performance Benchmark Script
# Timestamp: {{ ansible_date_time.iso8601 }}
# Environment: {{ deployment_environment }}

set -euo pipefail

# Configuration
DB_SERVICE="{{ database_service_name }}"
DB_USER="{{ database_username }}"
BENCHMARK_ITERATIONS="{{ benchmark_iterations | default(100) }}"
OUTPUT_DIR="{{ benchmark_output_dir | default('/tmp/benchmarks') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Initialize benchmark report
REPORT_FILE="$OUTPUT_DIR/benchmark_report_$(date +%Y%m%d_%H%M%S).txt"

init_report() {
    cat > "$REPORT_FILE" << EOF
====================================================================
Oracle Package Performance Benchmark Report
====================================================================
Environment: {{ deployment_environment }}
Database: {{ database_service_name }}
User: {{ database_username }}
Timestamp: $(date +'%Y-%m-%d %H:%M:%S')
Iterations: $BENCHMARK_ITERATIONS
====================================================================

EOF
}

# Run SQL benchmark
run_sql_benchmark() {
    local test_name="$1"
    local sql_statement="$2"
    local description="$3"
    
    log "Running benchmark: $test_name"
    
    local benchmark_sql=$(cat << EOF
SET TIMING ON
SET SERVEROUTPUT ON
SET PAGESIZE 0
SET FEEDBACK OFF
SET VERIFY OFF

DECLARE
    v_start_time NUMBER;
    v_end_time NUMBER;
    v_total_time NUMBER := 0;
    v_min_time NUMBER := 999999;
    v_max_time NUMBER := 0;
    v_avg_time NUMBER;
    v_iteration_time NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Benchmark: $test_name');
    DBMS_OUTPUT.PUT_LINE('Description: $description');
    DBMS_OUTPUT.PUT_LINE('Iterations: $BENCHMARK_ITERATIONS');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------');
    
    FOR i IN 1..$BENCHMARK_ITERATIONS LOOP
        v_start_time := DBMS_UTILITY.GET_TIME;
        
        $sql_statement
        
        v_end_time := DBMS_UTILITY.GET_TIME;
        v_iteration_time := (v_end_time - v_start_time) / 100; -- Convert to seconds
        
        v_total_time := v_total_time + v_iteration_time;
        
        IF v_iteration_time < v_min_time THEN
            v_min_time := v_iteration_time;
        END IF;
        
        IF v_iteration_time > v_max_time THEN
            v_max_time := v_iteration_time;
        END IF;
        
        IF MOD(i, 10) = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Completed iteration: ' || i);
        END IF;
    END LOOP;
    
    v_avg_time := v_total_time / $BENCHMARK_ITERATIONS;
    
    DBMS_OUTPUT.PUT_LINE('========================================');
    DBMS_OUTPUT.PUT_LINE('RESULTS:');
    DBMS_OUTPUT.PUT_LINE('Total Time: ' || ROUND(v_total_time, 4) || ' seconds');
    DBMS_OUTPUT.PUT_LINE('Average Time: ' || ROUND(v_avg_time, 4) || ' seconds');
    DBMS_OUTPUT.PUT_LINE('Min Time: ' || ROUND(v_min_time, 4) || ' seconds');
    DBMS_OUTPUT.PUT_LINE('Max Time: ' || ROUND(v_max_time, 4) || ' seconds');
    DBMS_OUTPUT.PUT_LINE('Operations/Second: ' || ROUND(1/v_avg_time, 2));
    DBMS_OUTPUT.PUT_LINE('========================================');
END;
/
EXIT;
EOF
)
    
    if echo "$benchmark_sql" | sqlplus -s "${DB_USER}@${DB_SERVICE}" >> "$REPORT_FILE" 2>&1; then
        success "Benchmark completed: $test_name"
        echo "" >> "$REPORT_FILE"
        return 0
    else
        error "Benchmark failed: $test_name"
        return 1
    fi
}

# Memory usage benchmark
run_memory_benchmark() {
    log "Running memory usage benchmark"
    
    local memory_sql=$(cat << 'EOF'
SET PAGESIZE 1000
SET LINESIZE 200

PROMPT Memory Usage Analysis
PROMPT =====================

SELECT 
    name,
    ROUND(value/1024/1024, 2) as value_mb
FROM v$mystat m, v$statname s
WHERE m.statistic# = s.statistic#
AND s.name IN (
    'session pga memory',
    'session pga memory max',
    'session uga memory',
    'session uga memory max'
)
ORDER BY name;

PROMPT
PROMPT Process Memory Details
PROMPT ======================

SELECT 
    program,
    ROUND(pga_used_mem/1024/1024, 2) as pga_used_mb,
    ROUND(pga_alloc_mem/1024/1024, 2) as pga_alloc_mb,
    ROUND(pga_freeable_mem/1024/1024, 2) as pga_freeable_mb,
    ROUND(pga_max_mem/1024/1024, 2) as pga_max_mb
FROM v$process
WHERE addr = (SELECT paddr FROM v$session WHERE sid = SYS_CONTEXT('USERENV', 'SID'));

EXIT;
EOF
)
    
    echo "MEMORY USAGE BENCHMARK" >> "$REPORT_FILE"
    echo "======================" >> "$REPORT_FILE"
    echo "$memory_sql" | sqlplus -s "${DB_USER}@${DB_SERVICE}" >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
}

# Main benchmark execution
main() {
    log "Starting performance benchmark suite"
    
    init_report
    
    # Database connection test
    run_sql_benchmark "Connection Test" "SELECT 1 FROM dual;" "Basic database connectivity test"
    
    # Package function benchmarks
{% for benchmark in performance_benchmarks|default([]) %}
    run_sql_benchmark "{{ benchmark.name }}" "{{ benchmark.sql }}" "{{ benchmark.description }}"
{% endfor %}
    
    # Memory usage analysis
    run_memory_benchmark
    
    # System statistics
    log "Collecting system statistics"
    
    local stats_sql=$(cat << 'EOF'
PROMPT System Statistics
PROMPT =================

SELECT 
    name,
    value
FROM v$mystat m, v$statname s
WHERE m.statistic# = s.statistic#
AND s.name IN (
    'CPU used by this session',
    'parse time cpu',
    'recursive cpu usage',
    'db block gets',
    'consistent gets',
    'physical reads',
    'redo size',
    'sorts (memory)',
    'sorts (disk)'
)
ORDER BY name;

EXIT;
EOF
)
    
    echo "SYSTEM STATISTICS" >> "$REPORT_FILE"
    echo "=================" >> "$REPORT_FILE"
    echo "$stats_sql" | sqlplus -s "${DB_USER}@${DB_SERVICE}" >> "$REPORT_FILE" 2>&1
    
    # Generate summary
    cat >> "$REPORT_FILE" << EOF

====================================================================
BENCHMARK SUMMARY
====================================================================
Benchmark completed successfully at $(date +'%Y-%m-%d %H:%M:%S')
Report location: $REPORT_FILE
Environment: {{ deployment_environment }}
Database: {{ database_service_name }}

Performance baseline established for:
{% for benchmark in performance_benchmarks|default([]) %}
- {{ benchmark.name }}: {{ benchmark.description }}
{% endfor %}

Notes:
- All times are measured in seconds
- Operations/Second indicates throughput capacity
- Memory usage shows current session allocation
- These benchmarks provide baseline for future comparisons

For detailed analysis, review the complete report above.
====================================================================
EOF
    
    success "Performance benchmark completed"
    success "Report available at: $REPORT_FILE"
    
    # Display summary
    echo ""
    echo "📊 BENCHMARK SUMMARY:"
    echo "   Report: $REPORT_FILE"
    echo "   Tests: $(grep -c "Benchmark:" "$REPORT_FILE")"
    echo "   Status: $(grep -q "BENCHMARK SUMMARY" "$REPORT_FILE" && echo "✅ SUCCESS" || echo "❌ FAILED")"
}

# Execute main function
main "$@"