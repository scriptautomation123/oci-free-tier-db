---
# Oracle Cloud Database Deployment Playbook
# ALWAYS FREE TIER PROTECTION ALWAYS FREE TIER PROTECTION: Automated database creation with cost protection
- name: Deploy Oracle Always Free Tier Database
  hosts: localhost
  gather_facts: true
  vars:
    deployment_log: "{{ logs_dir }}/database-deployment-{{ ansible_date_time.epoch }}.log"
    terraform_plan_file: "{{ terraform_dir }}/tfplan"

  tasks:
    - name: Display Database Deployment Banner
      ansible.builtin.debug:
        msg: |
          +------------------------------------------------------------------+
          |              Oracle Database Deployment                         |
          |              ALWAYS FREE TIER PROTECTION ALWAYS FREE TIER PROTECTION ALWAYS FREE TIER PROTECTION                  |
          |                                                                  |
          |  This playbook creates an Oracle Autonomous Database using      |
          |  ONLY Always Free tier resources (1 OCPU, 20GB, $0 cost).      |
          +------------------------------------------------------------------+

    # Pre-deployment validation
    - name: Check prerequisites
      block:
        - name: Verify Terraform is available
          ansible.builtin.command: "{{ local_bin_dir }}/terraform version"
          register: terraform_check
          failed_when: terraform_check.rc != 0
          changed_when: false

        - name: Verify OCI CLI is available
          ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/oci --version"
          register: oci_check
          failed_when: oci_check.rc != 0
          changed_when: false

        - name: Check OCI configuration
          ansible.builtin.stat:
            path: "{{ oci_config_dir }}/config"
          register: oci_config
          failed_when: not oci_config.stat.exists

        - name: Verify terraform.tfvars exists
          ansible.builtin.stat:
            path: "{{ config_dir }}/terraform.tfvars"
          register: tfvars_check
          failed_when: not tfvars_check.stat.exists
      rescue:
        - name: Prerequisite check failed
          ansible.builtin.debug:
            msg: |
              [ERROR] Prerequisites validation failed!
              Please ensure:
              - Terraform is installed in {{ local_bin_dir }}
              - OCI CLI is installed and configured
              - terraform.tfvars file exists in {{ config_dir }}

        - name: Fail playbook due to prerequisites
          ansible.builtin.fail:
            msg: "Cannot proceed without valid prerequisites. Check the requirements above."
    - name: Validate Always Free Tier configuration
      block:
        - name: Read terraform.tfvars content
          ansible.builtin.slurp:
            src: "{{ config_dir }}/terraform.tfvars"
          register: tfvars_content

        - name: Parse tfvars content
          ansible.builtin.set_fact:
            tfvars_text: "{{ tfvars_content.content | b64decode }}"

        - name: Validate Always Free Tier settings
          ansible.builtin.assert:
            that:
              - "'acknowledge_free_tier_limits = true' in tfvars_text"
              - "'cpu_core_count = 1' in tfvars_text"
              - "'storage_size_tbs = 0.02' in tfvars_text"
              - "'is_free_tier = true' in tfvars_text"
              - "'auto_scaling_enabled = false' in tfvars_text"
            fail_msg: |
              [ERROR] Always Free Tier validation failed!
              Required settings missing in terraform.tfvars:
              - acknowledge_free_tier_limits = true
              - cpu_core_count = 1
              - storage_size_tbs = 0.02
              - is_free_tier = true
              - auto_scaling_enabled = false
            success_msg: "[OK] Always Free Tier configuration validated"
      rescue:
        - name: Free Tier validation failed
          ansible.builtin.debug:
            msg: |
              [ERROR] Always Free Tier configuration validation failed!
              Please check your terraform.tfvars file and ensure all required settings are present.

        - name: Fail playbook due to configuration
          ansible.builtin.fail:
            msg: "Always Free Tier configuration is invalid. Please fix terraform.tfvars and retry."
    - name: Check existing Always Free database usage
      block:
        - name: Get compartment OCID from tfvars
          ansible.builtin.shell: |
            set -o pipefail
            grep 'compartment_ocid' "{{ config_dir }}/terraform.tfvars" | cut -d'"' -f2
          register: compartment_ocid_result
          changed_when: false

        - name: Set compartment OCID
          ansible.builtin.set_fact:
            compartment_ocid: "{{ compartment_ocid_result.stdout }}"
          when: compartment_ocid_result.stdout != ""

        - name: Check existing Always Free databases
          ansible.builtin.command: >
            {{ ansible_env.HOME }}/.local/bin/oci db autonomous-database list
            --compartment-id "{{ compartment_ocid }}"
            --query 'data[?"is-free-tier" == `true`].{"name":"display-name", "state":"lifecycle-state"}'
          register: existing_dbs
          failed_when: false
          changed_when: false
          when: compartment_ocid is defined

        - name: Count active Always Free databases
          ansible.builtin.set_fact:
            free_db_count: "{{ (existing_dbs.stdout | from_json | selectattr('state', 'in', ['AVAILABLE', 'PROVISIONING', 'STARTING']) | list) | length }}"
          when: existing_dbs.rc == 0 and existing_dbs.stdout != "[]"

        - name: Validate Always Free database limit
          ansible.builtin.assert:
            that:
              - (free_db_count | default(0) | int) < 2
            fail_msg: |
              [ERROR] You already have {{ free_db_count | default(0) }} Always Free databases.
              Always Free tier allows maximum 2 databases per tenancy.
              Please terminate one database before creating a new one.
            success_msg: "[OK] You can create {{ 2 - (free_db_count | default(0) | int) }} more Always Free database(s)"
      rescue:
        - name: Database usage check failed
          ansible.builtin.debug:
            msg: "[ERROR] Failed to check existing Always Free database usage. Please verify OCI CLI and permissions."
        - name: Fail play
          ansible.builtin.fail:
            msg: "Stopping playbook due to failed Always Free database usage check."
        - name: Count active Always Free databases
          ansible.builtin.set_fact:
            free_db_count: "{{ (existing_dbs.stdout | from_json | selectattr('state', 'in', ['AVAILABLE', 'PROVISIONING', 'STARTING']) | list) | length }}"
          when: existing_dbs.rc == 0 and existing_dbs.stdout != "[]"

        - name: Validate Always Free database limit
          ansible.builtin.assert:
            that:
              - (free_db_count | default(0) | int) < 2
            fail_msg: |
              [ERROR] You already have {{ free_db_count | default(0) }} Always Free databases.
              Always Free tier allows maximum 2 databases per tenancy.
              Please terminate one database before creating a new one.
            success_msg: "[OK] You can create {{ 2 - (free_db_count | default(0) | int) }} more Always Free database(s)"

    # Terraform operations
    - name: Initialize and plan Terraform deployment
      block:
        - name: Initialize Terraform
          ansible.builtin.command: "{{ local_bin_dir }}/terraform init"
          args:
            chdir: "{{ terraform_dir }}"
          register: terraform_init
          changed_when: false

        - name: Validate Terraform configuration
          ansible.builtin.command: "{{ local_bin_dir }}/terraform validate"
          args:
            chdir: "{{ terraform_dir }}"
          register: terraform_validate
          changed_when: false

        - name: Format Terraform files
          ansible.builtin.command: "{{ local_bin_dir }}/terraform fmt"
          args:
            chdir: "{{ terraform_dir }}"
          register: terraform_fmt
          changed_when: false

        - name: Create Terraform plan
          ansible.builtin.command: >
            {{ local_bin_dir }}/terraform plan
            -var-file="{{ config_dir }}/terraform.tfvars"
            -out="{{ terraform_plan_file }}"
          args:
            chdir: "{{ terraform_dir }}"
          register: terraform_plan
          changed_when: false
      rescue:
        - name: Terraform operations failed
          ansible.builtin.debug:
            msg: |
              [ERROR] Terraform operations failed!
              Please check:
              - Terraform configuration is valid
              - OCI credentials are properly configured
              - Network connectivity to Oracle Cloud

        - name: Fail playbook due to Terraform error
          ansible.builtin.fail:
            msg: "Terraform operations failed. Please resolve the issues above and retry."

    # Display plan and get approval
    - name: Display deployment plan
      ansible.builtin.debug:
        msg: |
          +------------------------------------------------------------------+
          |                     DEPLOYMENT PLAN                             |
          |              ALWAYS FREE TIER PROTECTION ALWAYS FREE TIER RESOURCES ALWAYS FREE TIER PROTECTION                   |
          |                                                                  |
          |  • 1x Autonomous Database (1 OCPU, 20GB) - FREE                 |
          |  • 1x Object Storage Bucket (20GB limit) - FREE                 |
          |  • VCN and networking resources - FREE                          |
          |                                                                  |
          |  [COST] COST: $0.00 (Always Free Tier)                              |
          |  [TIME] TIME LIMIT: None                                             |
          +------------------------------------------------------------------+

    - name: Prompt for deployment approval
      ansible.builtin.pause:
        prompt: |2

          Ready to deploy Always Free Oracle Database?
          This will create:
          - Oracle Autonomous Database (Always Free tier)
          - Object Storage bucket
          - VCN and networking resources

          All resources are FREE and will never expire.

          Press ENTER to continue or Ctrl+C to cancel

    # Apply Terraform plan
    - name: Apply Terraform deployment
      block:
        - name: Deploy infrastructure with Terraform
          ansible.builtin.command: "{{ local_bin_dir }}/terraform apply {{ terraform_plan_file }}"
          args:
            chdir: "{{ terraform_dir }}"
          register: terraform_apply
          changed_when: true
      rescue:
        - name: Terraform apply failed
          ansible.builtin.debug:
            msg: |
              [ERROR] Terraform deployment failed!
              Please check the Terraform output for errors.

        - name: Fail playbook due to deployment error
          ansible.builtin.fail:
            msg: "Terraform deployment failed. Please check the errors above and retry."

    # Get deployment outputs
    - name: Get database information
      block:
        - name: Get database name
          ansible.builtin.command: "{{ local_bin_dir }}/terraform output -raw database_name"
          args:
            chdir: "{{ terraform_dir }}"
          register: db_name
          changed_when: false

        - name: Get database ID
          ansible.builtin.command: "{{ local_bin_dir }}/terraform output -raw database_id"
          args:
            chdir: "{{ terraform_dir }}"
          register: db_id
          changed_when: false

        - name: Get admin password
          ansible.builtin.command: "{{ local_bin_dir }}/terraform output -raw admin_password"
          args:
            chdir: "{{ terraform_dir }}"
          register: admin_password
          changed_when: false

        - name: Get service console URL
          ansible.builtin.command: "{{ local_bin_dir }}/terraform output -raw service_console_url"
          args:
            chdir: "{{ terraform_dir }}"
          register: service_console
          changed_when: false

        - name: Get connection strings
          ansible.builtin.command: "{{ local_bin_dir }}/terraform output -json connection_strings"
          args:
            chdir: "{{ terraform_dir }}"
          register: connection_strings
          changed_when: false
      rescue:
        - name: Failed to get database outputs
          ansible.builtin.debug:
            msg: |
              [ERROR] Failed to retrieve database information from Terraform!
              The database may have been created but outputs are not available.
              Please check Terraform state manually.

        - name: Fail playbook due to output error
          ansible.builtin.fail:
            msg: "Could not retrieve database connection information. Check Terraform state manually."

    # Save connection details
    - name: Create connection details file
      ansible.builtin.template:
        src: connection-details.txt.j2
        dest: "{{ ansible_dir }}/../connection-details.txt"
        backup: true
        mode: "0600"
      vars:
        db_name_output: "{{ db_name.stdout }}"
        db_id_output: "{{ db_id.stdout }}"
        db_admin_password: "{{ admin_password.stdout }}"
        db_service_console_url: "{{ service_console.stdout }}"
        db_connection_info: "{{ connection_strings.stdout | from_json }}"
        deployment_time: "{{ ansible_date_time.iso8601 }}"

    # Display success message
    - name: Display deployment completion
      ansible.builtin.debug:
        msg: |
          +------------------------------------------------------------------+
          |               [SUCCESS] DATABASE DEPLOYED SUCCESSFULLY! [SUCCESS]             |
          |                     (Always Free Tier)                          |
          |                                                                  |
          |  Database Name: {{ db_name.stdout }}
          |  Database ID: {{ db_id.stdout }}
          |  Admin Username: ADMIN
          |  Service Console: {{ service_console.stdout }}
          |                                                                  |
          |  [COST] Cost: $0.00 (Always Free tier - no charges ever)            |
          |  [TIME] Time Limit: None (permanent free tier)                       |
          |                                                                  |
          |  Next Steps:                                                     |
          |  1. Run: ansible-playbook install-packages.yml                  |
          |  2. Or connect manually using connection details                |
          +------------------------------------------------------------------+

    # Cleanup
    - name: Cleanup Terraform plan file
      ansible.builtin.file:
        path: "{{ terraform_plan_file }}"
        state: absent
